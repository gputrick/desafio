    package desafio.ejb.geral;
    
    import desafio.CategoriaProdutoVO;
    import desafio.infra.DesafioException;
    import itaipu.util.ServiceLocator;
    import java.util.ArrayList;
    import java.util.Collection;
    import javax.ejb.CreateException;
    import javax.naming.NamingException;
    
    import weblogic.ejb.GenericEntityBean;
    
    /**
    * @ejbgen:entity enable-call-by-reference="true" default-transaction="Supports"
    *   ejb-name = "CategoriaProdutoBean"
    *   data-source-name="dsDesafio"
    *   table-name = "CATEGORIA_PRODUTO"
    *   prim-key-class = "java.lang.Long"
    *
    * @ejbgen:jndi-name
    *   local = "ejb.DesafioEjbs.CategoriaProdutoBeanHome"
    *
    * @ejbgen:file-generation local-class = "true" local-class-name = "CategoriaProduto" local-home = "true" local-home-name = "CategoriaProdutoHome" remote-class = "false" remote-class-name = "CategoriaProdutoRemote" remote-home = "false" remote-home-name = "CategoriaProdutoRemoteHome" value-class = "false" value-class-name = "CategoriaProdutoValue" pk-class = "true"
    * @ejbgen:automatic-key-generation name="CATEGORIA_PRODUTO_SEQ" cache-size="1" type="Oracle"
    * @ejbgen:relation role-name="CategoriaProdutoBean-has-ProdutoCategoriaProdutoBeans" target-ejb="ProdutoCategoriaProdutoBean" multiplicity="One" name="CategoriaProdutoBean-ProdutoCategoriaProdutoBean"
    * @ejbgen:relation role-name="CategoriaProdutoBean-has-CategoriaProdutoBeans" target-ejb="CategoriaProdutoBean" multiplicity="One" name="CategoriaProdutoBean-CategoriaProdutoBean"
    * @ejbgen:relation role-name="CategoriaProdutoBeans-have-CategoriaProdutoBean" fk-column="ID_CATEGORIA_PAI" cmr-field="categoriaProduto" target-ejb="CategoriaProdutoBean" multiplicity="Many" name="CategoriaProdutoBean-CategoriaProdutoBean"
    */
    
public abstract class CategoriaProdutoBean 
extends GenericEntityBean
{
    
    public java.lang.Long ejbCreate(CategoriaProdutoVO categoriaProdutoVO, ArrayList listaProdutoCategoriaProduto)
    throws CreateException, DesafioException
    {
        this.validaCategoriaProduto(categoriaProdutoVO);
        this.setData(categoriaProdutoVO);
        return null;
    }
    
    public void ejbPostCreate(CategoriaProdutoVO categoriaProdutoVO, ArrayList listaProdutoCategoriaProduto) 
    throws CreateException
    {
        this.setListaProdutoCategoriaProduto(listaProdutoCategoriaProduto);
    }
    
    
    /**
    * @ejbgen:cmp-field ordering-number="10" column = "ID_CATEGORIA_PRODUTO"
    *  primkey-field="true"
    * @ejbgen:local-method
    */
    public abstract Long getIdCategoriaProduto();
    /**
    * @ejbgen:local-method
    */
    public abstract void setIdCategoriaProduto(Long val);
    
    /**
    * @ejbgen:cmp-field column = "NOME"
    * @ejbgen:local-method
    */
    public abstract String getNomeCategoriaProduto();
    /**
    * @ejbgen:local-method
    */
    public abstract void setNomeCategoriaProduto(String val);
    
    /**
    * @ejbgen:cmr-field
    * @ejbgen:local-method
    */
    public abstract CategoriaProduto getCategoriaProduto();
    
    /**
    * @ejbgen:local-method
    */
    public abstract void setCategoriaProduto(CategoriaProduto arg);
    
    /**
    * @ejbgen:local-method
    */
    public abstract void setListaProdutoCategoriaProduto(ArrayList listaProdutoCategoriaProduto);
    
    public void setData(CategoriaProdutoVO categoriaProdutoVO) throws DesafioException{
        this.setNomeCategoriaProduto(categoriaProdutoVO.getNomeCategoriaProduto() == null ? null : categoriaProdutoVO.getNomeCategoriaProduto().trim());
    }
    /**
     * Método obtem os dados do Bean para o VO
     *
     * @return CategoriaProdutoVO
     * @throws DesafioException
     * @ejbgen:local-method transaction-attribute="Supports"
     */
    public CategoriaProdutoVO getData() throws DesafioException {
        CategoriaProdutoVO categoriaProdutoVO = new CategoriaProdutoVO();
    
        categoriaProdutoVO.setIdCategoriaProduto(this.getIdCategoriaProduto() == null ? 0 : this.getIdCategoriaProduto().longValue());
        categoriaProdutoVO.setNomeCategoriaProduto(this.getNomeCategoriaProduto());
    
        return categoriaProdutoVO;
    }
    
    
    /**
     * Método valida os dados do Value Object
     *
     * @param CategoriaProduto com os dados a serem validados
     * @throws DesafioException
     * @ejbgen:local-method transaction-attribute="Supports"
     */
    
    public void validaCategoriaProduto(CategoriaProdutoVO categoriaProdutoVO) throws DesafioException{
        if ((categoriaProdutoVO == null) ||
           (categoriaProdutoVO.getNomeCategoriaProduto() == null) ||
           (categoriaProdutoVO.getNomeCategoriaProduto().trim().equals(""))){
                throw new DesafioException("Desafio001 - CategoriaProduto: Dados incompletos");
           }
        }
    
    /**
     * Método retorna o nome jndi para lookup
     *
     * @return String
     */
    public static String getLocalJndiName() {
        return "ejb.DesafioEjbs.CategoriaProdutoBeanHome";
    }
    
     /**
     * Método retorna a classe home do bean
     *
     * @return CategoriaProdutoHome
     * @throws NamingException
     */
    public static CategoriaProdutoHome getHome() throws NamingException {
        return (CategoriaProdutoHome) ServiceLocator.getInstance().getLocalHome(getLocalJndiName());
    }
}
    
