package desafio.jcs; 

import com.bea.control.*;
import desafio.ProdutoCategoriaProdutoVO;
import desafio.ProdutoVO;
import javax.sql.RowSet;
/**
 * @editor-info:code-gen control-interface="true"
 */
public class JCSProdutoImpl implements JCSProduto, ControlSource
{ 
    /**
     * @common:control
     */
    private desafio.jcx.DBProdutoCategoriaProduto dBProdutoCategoriaProduto;

    /**
     * @common:control
     */
    private desafio.jcx.EJBProdutoCategoriaProdutoSession ejBProdutoCategoriaProdutoSession;

    /**
     * @common:control
     */
    private desafio.jcx.EJBProdutoSession ejBProdutoSession;

    static final long serialVersionUID = 1L;    

    /**
     * @common:control
     */
    private desafio.jcx.DBProduto dBProduto;

    /**
     * @common:operation
     */
    
    public RowSet obterListaProduto(String nomeProduto, DatabaseFilter filter) throws Exception
    {
        String orderByClause = " ORDER BY NOME_PRODUTO";
        StringBuffer whereClause = new StringBuffer();
        boolean concatenou = false;
        
        if((nomeProduto != null) &&
        (!nomeProduto.trim().equals(""))){
            if( concatenou )
            {  
                whereClause.append(" AND ");
            }
            else
            {
                whereClause.append(" WHERE ");
                concatenou = true;
            }
            
            whereClause.append(" (UPPER( NOME_PRODUTO ) LIKE UPPER('%")
            .append(nomeProduto.trim())
            .append("%') )");
        }
	if ( filter != null )
			{
				if ( filter.getWhereClause() != null && !filter.getWhereClause().toString().trim().equals("") )
				{
					whereClause = new StringBuffer();			
				}
				if ( filter.getOrderByClause() != null && !filter.getOrderByClause().toString().trim().equals("") ) 
				{
					orderByClause = "";
				}
			}
        else
        {
            filter = new DatabaseFilter();
        }
        //this.dBProduto.fazNada();
        return this.dBProduto.getListaProduto(whereClause.toString(), orderByClause, filter);
        
    }

    /**
     * @common:operation
     */
    public void eliminarProduto(ProdutoVO produtoVO) throws Exception
    {
        ProdutoCategoriaProdutoVO[] listaProdutoCategoriaProduto = this.dBProdutoCategoriaProduto.obterListaProdutoCategoriaProdutoPorProduto(produtoVO);
        if(listaProdutoCategoriaProduto.length > 0){
            for(int i = 0; i < listaProdutoCategoriaProduto.length; i++){
                this.ejBProdutoCategoriaProdutoSession.eliminarProdutoCategoriaProduto(listaProdutoCategoriaProduto[i]);
            }
        }
        this.ejBProdutoSession.eliminarProduto(produtoVO);
    }
    
    
    /**
     * @common:operation
     */
    public void atualizaProduto(ProdutoVO produtoVO) throws Exception
    {
        this.ejBProdutoSession.atualizarProduto(produtoVO);
    }
    
    /**
     * @common:operation
     */
    public ProdutoVO obterProduto(ProdutoVO produtoVO) throws Exception
    {
        produtoVO = this.ejBProdutoSession.obterProduto(produtoVO);
        produtoVO.setListaProdutoCategoriaProduto(this.dBProdutoCategoriaProduto.obterListaProdutoCategoriaProdutoPorProduto(produtoVO));
        
        return produtoVO;
    }
} 
